apiVersion: k3d.io/v1alpha5
kind: Simple
metadata:
  name: homelab-k3d
servers: 3
agents: 3
image: rancher/k3s:v1.27.4-k3s1
network: homelab-k3d-net
#subnet: "172.28.0.0/16" # same as `--subnet 172.28.0.0/16`
ports:
  - port: 3333:80 # same as `--port '8080:80@loadbalancer'`
    nodeFilters:
      - loadbalancer
# hostAliases: # /etc/hosts style entries to be injected into /etc/hosts in the node containers and in the NodeHosts section in CoreDNS
#   - ip: 1.2.3.4
#     hostnames: 
#       - my.host.local
#       - that.other.local
#   - ip: 1.1.1.1
#     hostnames:
#       - cloud.flare.dns
options:
  k3d: # k3d runtime settings
    wait: true # wait for cluster to be usable before returning; same as `--wait` (default: true)
    timeout: "60s" # wait timeout before aborting; same as `--timeout 60s`
    disableLoadbalancer: false # same as `--no-lb`
    disableImageVolume: false # same as `--no-image-volume`
    disableRollback: false # same as `--no-Rollback`
    loadbalancer:
      configOverrides:
        - settings.workerConnections=2048
  # k3s: # options passed on to K3s itself
  #   extraArgs: # additional arguments passed to the `k3s server|agent` command; same as `--k3s-arg`
  #     - arg: "--tls-san=my.host.domain"
  #       nodeFilters:
  #         - server:*
  #   nodeLabels:
  #     - label: foo=bar # same as `--k3s-node-label 'foo=bar@agent:1'` -> this results in a Kubernetes node label
  #       nodeFilters:
  #         - agent:1
  kubeconfig:
    updateDefaultKubeconfig: true # add new cluster to your default Kubeconfig; same as `--kubeconfig-update-default` (default: true)
    switchCurrentContext: true # also set current-context to the new cluster's context; same as `--kubeconfig-switch-context` (default: true)
